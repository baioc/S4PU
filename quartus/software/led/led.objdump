
led.elf:     file format elf32-littlenios2
led.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00000634 memsz 0x00000634 flags r-x
    LOAD off    0x00001654 vaddr 0x00008654 paddr 0x00008744 align 2**12
         filesz 0x000000f0 memsz 0x000000f0 flags rw-
    LOAD off    0x00001834 vaddr 0x00008834 paddr 0x00008834 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         00000618  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  00008638  00008638  00001638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       000000f0  00008654  00008744  00001654  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          00000010  00008834  00008834  00001834  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000026  00000000  00000000  00001744  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000248  00000000  00000000  00001770  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 0000034d  00000000  00000000  000019b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000029bb  00000000  00000000  00001d05  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000e00  00000000  00000000  000046c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00002fc8  00000000  00000000  000054c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000002f8  00000000  00000000  00008488  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000c20  00000000  00000000  00008780  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000065b  00000000  00000000  000093a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000050  00000000  00000000  000099fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000020  00000000  00000000  00009a50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  0000ab24  2**0
                  CONTENTS, READONLY
 17 .cpu          00000009  00000000  00000000  0000ab27  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  0000ab30  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0000ab31  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0000ab32  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0000ab36  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0000ab3a  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  0000ab3e  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  0000ab47  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  0000ab50  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000b  00000000  00000000  0000ab59  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000022  00000000  00000000  0000ab64  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     0002f009  00000000  00000000  0000ab86  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .text	00000000 .text
00008638 l    d  .rodata	00000000 .rodata
00008654 l    d  .rwdata	00000000 .rwdata
00008834 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 count.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00008654 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
00008294 l     F .text	00000020 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
000084ec l     F .text	0000007c udivmodsi4
00008320 g     F .text	0000002c alt_main
0000809c g     F .text	00000090 _puts_r
00008744 g       *ABS*	00000000 __flash_rwdata_start
0000873c g     O .rwdata	00000004 jtag_uart
00000000  w      *UND*	00000000 __errno
00008000 g     F .entry	0000001c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
00008834 g     O .bss	00000004 errno
0000883c g     O .bss	00000004 alt_argv
00010734 g       *ABS*	00000000 _gp
0000834c g     F .text	00000004 usleep
0000812c g     F .text	00000014 puts
00008628 g     F .text	00000008 __udivsi3
000084b4 g     F .text	00000038 alt_icache_flush
00008738 g     O .rwdata	00000004 _global_impure_ptr
00008844 g       *ABS*	00000000 __bss_end
0000849c g     F .text	00000004 alt_dcache_flush_all
00008744 g       *ABS*	00000000 __ram_rwdata_end
00008350 g     F .text	00000078 write
00008654 g       *ABS*	00000000 __ram_rodata_end
00008630 g     F .text	00000008 __umodsi3
00008844 g       *ABS*	00000000 end
0000d000 g       *ABS*	00000000 __alt_stack_pointer
000083ec g     F .text	00000034 altera_avalon_jtag_uart_write
00008020 g     F .text	0000003c _start
000083c8 g     F .text	00000004 alt_sys_init
00008654 g       *ABS*	00000000 __ram_rwdata_start
00008638 g       *ABS*	00000000 __ram_rodata_start
00008420 g     F .text	0000007c alt_busy_sleep
00008844 g       *ABS*	00000000 __alt_stack_base
00008160 g     F .text	000000bc __sfvwrite_small_dev
00008834 g       *ABS*	00000000 __bss_start
0000805c g     F .text	00000040 main
00008840 g     O .bss	00000004 alt_envp
00008740 g     O .rwdata	00000004 alt_errno
00008568 g     F .text	00000060 __divsi3
00008638 g       *ABS*	00000000 __flash_rodata_start
000083cc g     F .text	00000020 alt_irq_init
0000821c g     F .text	00000078 _write_r
00008734 g     O .rwdata	00000004 _impure_ptr
00008838 g     O .bss	00000004 alt_argc
00008000 g       *ABS*	00000000 __alt_mem_onchip_mem_nios2
00008020 g       *ABS*	00000000 __ram_exceptions_start
00008744 g       *ABS*	00000000 _edata
00008844 g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
000084ac g     F .text	00000008 altera_nios2_qsys_irq_init
0000801c g       .entry	00000000 exit
000085c8 g     F .text	00000060 __modsi3
0000d000 g       *ABS*	00000000 __alt_data_end
0000801c g       .entry	00000000 _exit
00008140 g     F .text	00000020 strlen
000084a0 g     F .text	0000000c alt_icache_flush_all
000082b4 g     F .text	0000006c alt_load



Disassembly of section .entry:

00008000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
    8000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
    8004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
    8008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
    800c:	00bffd16 	blt	zero,r2,8004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8010:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8014:	08600814 	ori	at,at,32800
    jmp r1
    8018:	0800683a 	jmp	at

0000801c <_exit>:
    801c:	00000000 	call	0 <__alt_mem_onchip_mem_nios2-0x8000>

Disassembly of section .text:

00008020 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	def40014 	ori	sp,sp,53248

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d681cd14 	ori	gp,gp,1844
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10a20d14 	ori	r2,r2,34868

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18e21114 	ori	r3,r3,34884

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	00082b40 	call	82b4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	00083200 	call	8320 <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <alt_after_alt_main>

0000805c <main>:

#include <stdio.h>
#include <unistd.h>


int main(void) {
    805c:	defffe04 	addi	sp,sp,-8
	printf("Hello, NiosII World.\n");
    8060:	01000074 	movhi	r4,1
    8064:	21218e04 	addi	r4,r4,-31176

#include <stdio.h>
#include <unistd.h>


int main(void) {
    8068:	dc000015 	stw	r16,0(sp)
    806c:	dfc00115 	stw	ra,4(sp)
	printf("Hello, NiosII World.\n");
    8070:	0021883a 	mov	r16,zero
    8074:	000812c0 	call	812c <puts>

	unsigned short k = 0;

	while (1) {
		IOWR_16DIRECT(LED_PIO_BASE, 0, k);
    8078:	80ffffcc 	andi	r3,r16,65535
    807c:	00800074 	movhi	r2,1
    8080:	10840004 	addi	r2,r2,4096
    8084:	10c0002d 	sthio	r3,0(r2)
		usleep(1000000);
    8088:	010003f4 	movhi	r4,15
    808c:	21109004 	addi	r4,r4,16960
    8090:	000834c0 	call	834c <usleep>
    8094:	84000044 	addi	r16,r16,1
    8098:	003ff706 	br	8078 <main+0x1c>

0000809c <_puts_r>:
    809c:	defffd04 	addi	sp,sp,-12
    80a0:	dc000015 	stw	r16,0(sp)
    80a4:	2021883a 	mov	r16,r4
    80a8:	2809883a 	mov	r4,r5
    80ac:	dfc00215 	stw	ra,8(sp)
    80b0:	dc400115 	stw	r17,4(sp)
    80b4:	2823883a 	mov	r17,r5
    80b8:	00081400 	call	8140 <strlen>
    80bc:	80c00217 	ldw	r3,8(r16)
    80c0:	02000074 	movhi	r8,1
    80c4:	42205804 	addi	r8,r8,-32416
    80c8:	880d883a 	mov	r6,r17
    80cc:	100f883a 	mov	r7,r2
    80d0:	8009883a 	mov	r4,r16
    80d4:	180b883a 	mov	r5,r3
    80d8:	1a000115 	stw	r8,4(r3)
    80dc:	403ee83a 	callr	r8
    80e0:	047fffc4 	movi	r17,-1
    80e4:	8009883a 	mov	r4,r16
    80e8:	01800074 	movhi	r6,1
    80ec:	31a19404 	addi	r6,r6,-31152
    80f0:	01c00044 	movi	r7,1
    80f4:	1440071e 	bne	r2,r17,8114 <_puts_r+0x78>
    80f8:	00ffffc4 	movi	r3,-1
    80fc:	1805883a 	mov	r2,r3
    8100:	dfc00217 	ldw	ra,8(sp)
    8104:	dc400117 	ldw	r17,4(sp)
    8108:	dc000017 	ldw	r16,0(sp)
    810c:	dec00304 	addi	sp,sp,12
    8110:	f800283a 	ret
    8114:	81400217 	ldw	r5,8(r16)
    8118:	28c00117 	ldw	r3,4(r5)
    811c:	183ee83a 	callr	r3
    8120:	0007883a 	mov	r3,zero
    8124:	147ff51e 	bne	r2,r17,80fc <_puts_r+0x60>
    8128:	003ff306 	br	80f8 <_puts_r+0x5c>

0000812c <puts>:
    812c:	00800074 	movhi	r2,1
    8130:	10a1cd04 	addi	r2,r2,-30924
    8134:	200b883a 	mov	r5,r4
    8138:	11000017 	ldw	r4,0(r2)
    813c:	000809c1 	jmpi	809c <_puts_r>

00008140 <strlen>:
    8140:	20800007 	ldb	r2,0(r4)
    8144:	10000526 	beq	r2,zero,815c <strlen+0x1c>
    8148:	2007883a 	mov	r3,r4
    814c:	18c00044 	addi	r3,r3,1
    8150:	18800007 	ldb	r2,0(r3)
    8154:	103ffd1e 	bne	r2,zero,814c <strlen+0xc>
    8158:	1905c83a 	sub	r2,r3,r4
    815c:	f800283a 	ret

00008160 <__sfvwrite_small_dev>:
    8160:	2880000b 	ldhu	r2,0(r5)
    8164:	defffa04 	addi	sp,sp,-24
    8168:	dcc00315 	stw	r19,12(sp)
    816c:	1080020c 	andi	r2,r2,8
    8170:	dc800215 	stw	r18,8(sp)
    8174:	dc400115 	stw	r17,4(sp)
    8178:	dfc00515 	stw	ra,20(sp)
    817c:	dd000415 	stw	r20,16(sp)
    8180:	dc000015 	stw	r16,0(sp)
    8184:	2825883a 	mov	r18,r5
    8188:	2027883a 	mov	r19,r4
    818c:	3023883a 	mov	r17,r6
    8190:	10002026 	beq	r2,zero,8214 <__sfvwrite_small_dev+0xb4>
    8194:	2940008f 	ldh	r5,2(r5)
    8198:	28000f16 	blt	r5,zero,81d8 <__sfvwrite_small_dev+0x78>
    819c:	01c01b0e 	bge	zero,r7,820c <__sfvwrite_small_dev+0xac>
    81a0:	3821883a 	mov	r16,r7
    81a4:	05010004 	movi	r20,1024
    81a8:	00000206 	br	81b4 <__sfvwrite_small_dev+0x54>
    81ac:	0400170e 	bge	zero,r16,820c <__sfvwrite_small_dev+0xac>
    81b0:	9140008f 	ldh	r5,2(r18)
    81b4:	880d883a 	mov	r6,r17
    81b8:	9809883a 	mov	r4,r19
    81bc:	800f883a 	mov	r7,r16
    81c0:	a400010e 	bge	r20,r16,81c8 <__sfvwrite_small_dev+0x68>
    81c4:	01c10004 	movi	r7,1024
    81c8:	000821c0 	call	821c <_write_r>
    81cc:	88a3883a 	add	r17,r17,r2
    81d0:	80a1c83a 	sub	r16,r16,r2
    81d4:	00bff516 	blt	zero,r2,81ac <__sfvwrite_small_dev+0x4c>
    81d8:	9080000b 	ldhu	r2,0(r18)
    81dc:	00ffffc4 	movi	r3,-1
    81e0:	10801014 	ori	r2,r2,64
    81e4:	9080000d 	sth	r2,0(r18)
    81e8:	1805883a 	mov	r2,r3
    81ec:	dfc00517 	ldw	ra,20(sp)
    81f0:	dd000417 	ldw	r20,16(sp)
    81f4:	dcc00317 	ldw	r19,12(sp)
    81f8:	dc800217 	ldw	r18,8(sp)
    81fc:	dc400117 	ldw	r17,4(sp)
    8200:	dc000017 	ldw	r16,0(sp)
    8204:	dec00604 	addi	sp,sp,24
    8208:	f800283a 	ret
    820c:	0007883a 	mov	r3,zero
    8210:	003ff506 	br	81e8 <__sfvwrite_small_dev+0x88>
    8214:	00ffffc4 	movi	r3,-1
    8218:	003ff306 	br	81e8 <__sfvwrite_small_dev+0x88>

0000821c <_write_r>:
    821c:	defffd04 	addi	sp,sp,-12
    8220:	dc000015 	stw	r16,0(sp)
    8224:	04000074 	movhi	r16,1
    8228:	84220d04 	addi	r16,r16,-30668
    822c:	dc400115 	stw	r17,4(sp)
    8230:	80000015 	stw	zero,0(r16)
    8234:	2023883a 	mov	r17,r4
    8238:	2809883a 	mov	r4,r5
    823c:	300b883a 	mov	r5,r6
    8240:	380d883a 	mov	r6,r7
    8244:	dfc00215 	stw	ra,8(sp)
    8248:	00083500 	call	8350 <write>
    824c:	1007883a 	mov	r3,r2
    8250:	00bfffc4 	movi	r2,-1
    8254:	18800626 	beq	r3,r2,8270 <_write_r+0x54>
    8258:	1805883a 	mov	r2,r3
    825c:	dfc00217 	ldw	ra,8(sp)
    8260:	dc400117 	ldw	r17,4(sp)
    8264:	dc000017 	ldw	r16,0(sp)
    8268:	dec00304 	addi	sp,sp,12
    826c:	f800283a 	ret
    8270:	80800017 	ldw	r2,0(r16)
    8274:	103ff826 	beq	r2,zero,8258 <_write_r+0x3c>
    8278:	88800015 	stw	r2,0(r17)
    827c:	1805883a 	mov	r2,r3
    8280:	dfc00217 	ldw	ra,8(sp)
    8284:	dc400117 	ldw	r17,4(sp)
    8288:	dc000017 	ldw	r16,0(sp)
    828c:	dec00304 	addi	sp,sp,12
    8290:	f800283a 	ret

00008294 <alt_load_section>:

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8294:	2900051e 	bne	r5,r4,82ac <alt_load_section+0x18>
    8298:	f800283a 	ret
  {
    while( to != end )
    {
      *to++ = *from++;
    829c:	20800017 	ldw	r2,0(r4)
    82a0:	21000104 	addi	r4,r4,4
    82a4:	28800015 	stw	r2,0(r5)
    82a8:	29400104 	addi	r5,r5,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    82ac:	29bffb1e 	bne	r5,r6,829c <alt_load_section+0x8>
    82b0:	f800283a 	ret

000082b4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    82b4:	deffff04 	addi	sp,sp,-4
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    82b8:	01000074 	movhi	r4,1
    82bc:	2121d104 	addi	r4,r4,-30908
    82c0:	01400074 	movhi	r5,1
    82c4:	29619504 	addi	r5,r5,-31148
    82c8:	01800074 	movhi	r6,1
    82cc:	31a1d104 	addi	r6,r6,-30908
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    82d0:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    82d4:	00082940 	call	8294 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    82d8:	01000074 	movhi	r4,1
    82dc:	21200804 	addi	r4,r4,-32736
    82e0:	01400074 	movhi	r5,1
    82e4:	29600804 	addi	r5,r5,-32736
    82e8:	01800074 	movhi	r6,1
    82ec:	31a00804 	addi	r6,r6,-32736
    82f0:	00082940 	call	8294 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    82f4:	01000074 	movhi	r4,1
    82f8:	21218e04 	addi	r4,r4,-31176
    82fc:	01400074 	movhi	r5,1
    8300:	29618e04 	addi	r5,r5,-31176
    8304:	01800074 	movhi	r6,1
    8308:	31a19504 	addi	r6,r6,-31148
    830c:	00082940 	call	8294 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    8310:	000849c0 	call	849c <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    8314:	dfc00017 	ldw	ra,0(sp)
    8318:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    831c:	00084a01 	jmpi	84a0 <alt_icache_flush_all>

00008320 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8320:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8324:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8328:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    832c:	00083cc0 	call	83cc <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    8330:	00083c80 	call	83c8 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    8334:	d1204117 	ldw	r4,-32508(gp)
    8338:	d1604217 	ldw	r5,-32504(gp)
    833c:	d1a04317 	ldw	r6,-32500(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    8340:	dfc00017 	ldw	ra,0(sp)
    8344:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    8348:	000805c1 	jmpi	805c <main>

0000834c <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
    834c:	00084201 	jmpi	8420 <alt_busy_sleep>

00008350 <write>:
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    8350:	deffff04 	addi	sp,sp,-4
    8354:	2007883a 	mov	r3,r4
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
    8358:	00800044 	movi	r2,1
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    835c:	dfc00015 	stw	ra,0(sp)
#endif

    switch (file) {
#ifdef ALT_STDOUT_PRESENT
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
    8360:	000f883a 	mov	r7,zero
    8364:	01000074 	movhi	r4,1
    8368:	2121cf04 	addi	r4,r4,-30916
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
    836c:	18800526 	beq	r3,r2,8384 <write+0x34>
    8370:	00800084 	movi	r2,2
    8374:	1880061e 	bne	r3,r2,8390 <write+0x40>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    8378:	01000074 	movhi	r4,1
    837c:	2121cf04 	addi	r4,r4,-30916
    8380:	000f883a 	mov	r7,zero
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
        return -1;
    }
}
    8384:	dfc00017 	ldw	ra,0(sp)
    8388:	dec00104 	addi	sp,sp,4
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    838c:	00083ec1 	jmpi	83ec <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    8390:	00800074 	movhi	r2,1
    8394:	10a1d004 	addi	r2,r2,-30912
    8398:	10800017 	ldw	r2,0(r2)
    839c:	00c00074 	movhi	r3,1
    83a0:	18e20d04 	addi	r3,r3,-30668
    83a4:	10000226 	beq	r2,zero,83b0 <write+0x60>
    83a8:	103ee83a 	callr	r2
    83ac:	1007883a 	mov	r3,r2
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    83b0:	00801444 	movi	r2,81
    83b4:	18800015 	stw	r2,0(r3)
        return -1;
    }
}
    83b8:	00bfffc4 	movi	r2,-1
    83bc:	dfc00017 	ldw	ra,0(sp)
    83c0:	dec00104 	addi	sp,sp,4
    83c4:	f800283a 	ret

000083c8 <alt_sys_init>:

void alt_sys_init( void )
{
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
}
    83c8:	f800283a 	ret

000083cc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    83cc:	deffff04 	addi	sp,sp,-4
    83d0:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_CPU, nios2_cpu);
    83d4:	00084ac0 	call	84ac <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    83d8:	00800044 	movi	r2,1
    83dc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    83e0:	dfc00017 	ldw	ra,0(sp)
    83e4:	dec00104 	addi	sp,sp,4
    83e8:	f800283a 	ret

000083ec <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    83ec:	21000017 	ldw	r4,0(r4)

  const char * end = ptr + count;
    83f0:	298f883a 	add	r7,r5,r6
    83f4:	20c00104 	addi	r3,r4,4
    83f8:	00000606 	br	8414 <altera_avalon_jtag_uart_write+0x28>

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    83fc:	18800037 	ldwio	r2,0(r3)
    8400:	10bfffec 	andhi	r2,r2,65535
    8404:	10000326 	beq	r2,zero,8414 <altera_avalon_jtag_uart_write+0x28>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    8408:	28800007 	ldb	r2,0(r5)
    840c:	29400044 	addi	r5,r5,1
    8410:	20800035 	stwio	r2,0(r4)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    8414:	29fff936 	bltu	r5,r7,83fc <altera_avalon_jtag_uart_write+0x10>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
    8418:	3005883a 	mov	r2,r6
    841c:	f800283a 	ret

00008420 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    8420:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    8424:	01420034 	movhi	r5,2048
    8428:	297fffc4 	addi	r5,r5,-1
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    842c:	dc000015 	stw	r16,0(sp)
    8430:	dfc00115 	stw	ra,4(sp)
    8434:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    8438:	00086280 	call	8628 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    843c:	10000f26 	beq	r2,zero,847c <alt_busy_sleep+0x5c>
    8440:	0007883a 	mov	r3,zero
    8444:	01200034 	movhi	r4,32768
    8448:	213fffc4 	addi	r4,r4,-1
    844c:	017e0034 	movhi	r5,63488
    8450:	29400044 	addi	r5,r5,1
    8454:	00000406 	br	8468 <alt_busy_sleep+0x48>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    8458:	213fffc4 	addi	r4,r4,-1
    845c:	203ffe1e 	bne	r4,zero,8458 <alt_busy_sleep+0x38>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    8460:	8161883a 	add	r16,r16,r5
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    8464:	18c00044 	addi	r3,r3,1
    8468:	18bffb16 	blt	r3,r2,8458 <alt_busy_sleep+0x38>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    846c:	8004913a 	slli	r2,r16,4
    8470:	10bfffc4 	addi	r2,r2,-1
    8474:	103ffe1e 	bne	r2,zero,8470 <alt_busy_sleep+0x50>
    8478:	00000306 	br	8488 <alt_busy_sleep+0x68>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    847c:	8004913a 	slli	r2,r16,4
    8480:	10bfffc4 	addi	r2,r2,-1
    8484:	00bffe16 	blt	zero,r2,8480 <alt_busy_sleep+0x60>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
    8488:	0005883a 	mov	r2,zero
    848c:	dfc00117 	ldw	ra,4(sp)
    8490:	dc000017 	ldw	r16,0(sp)
    8494:	dec00204 	addi	sp,sp,8
    8498:	f800283a 	ret

0000849c <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    849c:	f800283a 	ret

000084a0 <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    84a0:	0009883a 	mov	r4,zero
    84a4:	01420004 	movi	r5,2048
    84a8:	00084b41 	jmpi	84b4 <alt_icache_flush>

000084ac <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    84ac:	000170fa 	wrctl	ienable,zero
}
    84b0:	f800283a 	ret

000084b4 <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
    84b4:	00820004 	movi	r2,2048
    84b8:	2007883a 	mov	r3,r4
    84bc:	1140012e 	bgeu	r2,r5,84c4 <alt_icache_flush+0x10>
    84c0:	100b883a 	mov	r5,r2
    84c4:	194b883a 	add	r5,r3,r5
    84c8:	00000206 	br	84d4 <alt_icache_flush+0x20>

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    84cc:	1800603a 	flushi	r3
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    84d0:	18c00804 	addi	r3,r3,32
    84d4:	197ffd36 	bltu	r3,r5,84cc <alt_icache_flush+0x18>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    84d8:	208007cc 	andi	r2,r4,31
    84dc:	10000126 	beq	r2,zero,84e4 <alt_icache_flush+0x30>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    84e0:	1800603a 	flushi	r3
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    84e4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    84e8:	f800283a 	ret

000084ec <udivmodsi4>:
    84ec:	29001b2e 	bgeu	r5,r4,855c <udivmodsi4+0x70>
    84f0:	28001a16 	blt	r5,zero,855c <udivmodsi4+0x70>
    84f4:	00800044 	movi	r2,1
    84f8:	0007883a 	mov	r3,zero
    84fc:	01c007c4 	movi	r7,31
    8500:	00000306 	br	8510 <udivmodsi4+0x24>
    8504:	19c01326 	beq	r3,r7,8554 <udivmodsi4+0x68>
    8508:	18c00044 	addi	r3,r3,1
    850c:	28000416 	blt	r5,zero,8520 <udivmodsi4+0x34>
    8510:	294b883a 	add	r5,r5,r5
    8514:	1085883a 	add	r2,r2,r2
    8518:	293ffa36 	bltu	r5,r4,8504 <udivmodsi4+0x18>
    851c:	10000d26 	beq	r2,zero,8554 <udivmodsi4+0x68>
    8520:	0007883a 	mov	r3,zero
    8524:	21400236 	bltu	r4,r5,8530 <udivmodsi4+0x44>
    8528:	2149c83a 	sub	r4,r4,r5
    852c:	1886b03a 	or	r3,r3,r2
    8530:	1004d07a 	srli	r2,r2,1
    8534:	280ad07a 	srli	r5,r5,1
    8538:	103ffa1e 	bne	r2,zero,8524 <udivmodsi4+0x38>
    853c:	30000226 	beq	r6,zero,8548 <udivmodsi4+0x5c>
    8540:	2005883a 	mov	r2,r4
    8544:	f800283a 	ret
    8548:	1809883a 	mov	r4,r3
    854c:	2005883a 	mov	r2,r4
    8550:	f800283a 	ret
    8554:	0007883a 	mov	r3,zero
    8558:	003ff806 	br	853c <udivmodsi4+0x50>
    855c:	00800044 	movi	r2,1
    8560:	0007883a 	mov	r3,zero
    8564:	003fef06 	br	8524 <udivmodsi4+0x38>

00008568 <__divsi3>:
    8568:	defffe04 	addi	sp,sp,-8
    856c:	dc000015 	stw	r16,0(sp)
    8570:	dfc00115 	stw	ra,4(sp)
    8574:	0021883a 	mov	r16,zero
    8578:	20000c16 	blt	r4,zero,85ac <__divsi3+0x44>
    857c:	000d883a 	mov	r6,zero
    8580:	28000e16 	blt	r5,zero,85bc <__divsi3+0x54>
    8584:	00084ec0 	call	84ec <udivmodsi4>
    8588:	1007883a 	mov	r3,r2
    858c:	8005003a 	cmpeq	r2,r16,zero
    8590:	1000011e 	bne	r2,zero,8598 <__divsi3+0x30>
    8594:	00c7c83a 	sub	r3,zero,r3
    8598:	1805883a 	mov	r2,r3
    859c:	dfc00117 	ldw	ra,4(sp)
    85a0:	dc000017 	ldw	r16,0(sp)
    85a4:	dec00204 	addi	sp,sp,8
    85a8:	f800283a 	ret
    85ac:	0109c83a 	sub	r4,zero,r4
    85b0:	04000044 	movi	r16,1
    85b4:	000d883a 	mov	r6,zero
    85b8:	283ff20e 	bge	r5,zero,8584 <__divsi3+0x1c>
    85bc:	014bc83a 	sub	r5,zero,r5
    85c0:	8021003a 	cmpeq	r16,r16,zero
    85c4:	003fef06 	br	8584 <__divsi3+0x1c>

000085c8 <__modsi3>:
    85c8:	deffff04 	addi	sp,sp,-4
    85cc:	dfc00015 	stw	ra,0(sp)
    85d0:	01800044 	movi	r6,1
    85d4:	2807883a 	mov	r3,r5
    85d8:	20000416 	blt	r4,zero,85ec <__modsi3+0x24>
    85dc:	28000c16 	blt	r5,zero,8610 <__modsi3+0x48>
    85e0:	dfc00017 	ldw	ra,0(sp)
    85e4:	dec00104 	addi	sp,sp,4
    85e8:	00084ec1 	jmpi	84ec <udivmodsi4>
    85ec:	0109c83a 	sub	r4,zero,r4
    85f0:	28000b16 	blt	r5,zero,8620 <__modsi3+0x58>
    85f4:	180b883a 	mov	r5,r3
    85f8:	01800044 	movi	r6,1
    85fc:	00084ec0 	call	84ec <udivmodsi4>
    8600:	0085c83a 	sub	r2,zero,r2
    8604:	dfc00017 	ldw	ra,0(sp)
    8608:	dec00104 	addi	sp,sp,4
    860c:	f800283a 	ret
    8610:	014bc83a 	sub	r5,zero,r5
    8614:	dfc00017 	ldw	ra,0(sp)
    8618:	dec00104 	addi	sp,sp,4
    861c:	00084ec1 	jmpi	84ec <udivmodsi4>
    8620:	0147c83a 	sub	r3,zero,r5
    8624:	003ff306 	br	85f4 <__modsi3+0x2c>

00008628 <__udivsi3>:
    8628:	000d883a 	mov	r6,zero
    862c:	00084ec1 	jmpi	84ec <udivmodsi4>

00008630 <__umodsi3>:
    8630:	01800044 	movi	r6,1
    8634:	00084ec1 	jmpi	84ec <udivmodsi4>
